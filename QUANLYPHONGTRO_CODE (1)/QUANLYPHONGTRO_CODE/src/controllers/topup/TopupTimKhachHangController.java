package controllers.topup;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import model.HoaDon;
import model.KhachHang;
import service.HoaDonService;
import service.KhachHangSerivce;
import utils.ThongBao;
import views.HoaDonView;
import views.ViewKhachHang;
import views.ViewTimKhachHang;

import java.net.URL;
import java.util.Iterator;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;

import javafx.scene.control.TableView;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;

public class TopupTimKhachHangController implements Initializable{
	@FXML
	private TableView<ViewTimKhachHang> tableKhachHang;
	@FXML
	private TableColumn<ViewTimKhachHang, String> colMaKhachHang;
	@FXML
	private TableColumn<ViewTimKhachHang, String>  colTenKhachHang;
	@FXML
	private TableColumn<ViewTimKhachHang, String>  colSDT;
	@FXML
	private TableColumn<ViewTimKhachHang, String>  colCMND;
	@FXML
	private TableColumn<ViewTimKhachHang, Button>  colChon;
	@FXML
	private TextField textTim;
	
	private ObservableList<ViewTimKhachHang> listKhachHang = FXCollections.observableArrayList();
	// Event Listener on JFXButton.onAction
	private void initDefauut() {
		listKhachHang.clear();
	    
        Iterator<KhachHang> it = KhachHangSerivce.findKhachHang().iterator();
        while(it.hasNext()) {
        	KhachHang value = it.next();
        	ViewTimKhachHang view = new ViewTimKhachHang();
        	view.setCMND(value.getDiaChi());
        	view.setMaKhachHang(value.getMaKhachHang());
        	view.setSDT(value.getSdt());
        	view.setTenKhachHang(value.getTenKhachHang());
            Button btnChon = new Button("Ch·ªçn");
            view.setBtnChon(btnChon);
            handleChon(btnChon, view, value);
            listKhachHang.add(view);
        }
        
        colChon.setCellValueFactory(new PropertyValueFactory<>("btnChon"));
        colCMND.setCellValueFactory(new PropertyValueFactory<>("CMND"));
        colMaKhachHang.setCellValueFactory(new PropertyValueFactory<>("maKhachHang"));
        colSDT.setCellValueFactory(new PropertyValueFactory<>("SDT"));
        colTenKhachHang.setCellValueFactory(new PropertyValueFactory<>("tenKhachHang"));

        tableKhachHang.setItems(listKhachHang);
	}
	private void handleChon(Button btn, ViewTimKhachHang value, KhachHang khachHang) {
		btn.setOnAction(events -> {
			TopupThemHoaDonController.setKhachHang(khachHang);
			btn.getScene().getWindow().hide();
		});
	}
	@FXML
	public void handleThoat(ActionEvent event) {
		// TODO Autogenerated
		
		
	}
	 private void timKhachHang() {
	  	  FilteredList<ViewTimKhachHang> filteredData = new FilteredList(listKhachHang, p -> true);
	        textTim.textProperty().addListener((observable, oldValue, newValue) -> {
	            filteredData.setPredicate(khachHang -> {
	                if (newValue == null || newValue.isEmpty()) {
	                    return true;
	                }
	                String lowerCaseFilter = newValue.toLowerCase();
	                if (khachHang.getMaKhachHang().toLowerCase().contains(lowerCaseFilter)) {
	                    return true; 
	                }
	                if (khachHang.getTenKhachHang().toLowerCase().contains(lowerCaseFilter)) {
	                    return true; 
	                }
	                if (khachHang.getSDT().toLowerCase().contains(lowerCaseFilter)) {
	                    return true; 
	                }
	                if (khachHang.getCMND().toLowerCase().contains(lowerCaseFilter)) {
	                    return true; 
	                }
	                return false; 
	            });
	        });
	        SortedList<ViewTimKhachHang> sortedData = new SortedList<>(filteredData);
	        sortedData.comparatorProperty().bind(tableKhachHang.comparatorProperty());
	        tableKhachHang.setItems(sortedData);
	  }
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		initDefauut();
		timKhachHang();
		
	}
}
